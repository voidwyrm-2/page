% 'over', a common stack language operation,
% isn't in PostScript because 'roll' implements part of its functionality
/over {
  % A B
  exch dup % B A A
  3 -1 roll % A A B
  exch % A B A
} def

/fib {
1 dict begin % Create a new dictionary with one initial slot
  /i exch def % Set 'i' to the amount of numbers given

  [ % lists get their own stack
    0 1 % The initial Fibonacci values
    { over over add % a = b; b = a + b

      /i i 1 sub def % Decrement the counter, 'i'
      i 1 le % If counter is less than 1, exit loop
      {exit}
      if
    } loop % loops in PostScript don't have their own stack
  ]
end
% Dictionaries act as scopes in PostScript,
% 'begin' pushes a dictionary onto the dictionary stack,
% 'end' pops one off,
% the dictionary at the top of the stack is prioritized for symbol searching.
} def

10 fib ==
% Call 'fib' and print the result
% '==' must be used because '=' doesn't print the contents of the list
