/export 0 dict def

export begin

/_scope {dict begin} def

/_state 0 dict def

_state begin
  /title () def
  /tests [] def
  /addTest {
  1 _scope
    /t exch def
    [tests {} forall t]
  end

    /tests exch def
  } def
end

/settitle {
  _state {/title exch def} scoped
} def

/expect {
2 _scope
  /val exch def
  /test exch def
  [val /test load]
  _state /addTest .
end
} def

/runall {
4 _scope
  /title {_state /title .} def

  /count 1 def

  title (BEGIN TEST '%f'\n) printf

  _state /tests .
  {
    {} forall
    exch
    /expec exch def
    exec
    /actua exch def

    actua
    expec
    eq
    {actua (PASSED, got %d) sprintf}
    {actua (FAILED, got %d instead) sprintf}
    ifelse

    count exch expec exch (CASE %f, expecting %d -- %f\n) printf

    /count count 1 add def
  } forall

  title (END TEST '%f'\n) printf
  
end
} def
